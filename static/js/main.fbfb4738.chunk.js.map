{"version":3,"sources":["APIManager.ts","YouTubeVideo.tsx","BinarySearch.ts","Music.tsx","App.tsx","index.tsx"],"names":["APIManager","data","music","YoutubeVideo","props","width","height","onReady","onStateChange","onCurrentTimeChange","loopCurrentSong","useState","player","setPlayer","useEffect","interval","setInterval","getCurrentTime","clearInterval","loadVideo","window","YT","Player","events","tag","document","createElement","src","onYouTubeIframeAPIReady","firstScriptTag","getElementsByTagName","parentNode","insertBefore","loadPlaylist","getPlaylistIndex","id","setLoop","map","m","BinarySearch","items","item","this","findFloorIndexHelper","length","lo","hi","mid","Math","floor","useStyles","makeStyles","theme","active","marginTop","spacing","marginBottom","inactive","color","logo","marginRight","copyToClipboard","text","dummy","body","appendChild","value","select","execCommand","removeChild","Music","classes","setMusic","currentVideoIndex","setCurrentVideoIndex","currentVideoTimeIndex","setCurrentVideoTimeIndex","currentVideoTime","setCurrentVideoTime","times","setTimes","lyrics","setLyrics","loopChecked","setLoopChecked","ref","useRef","getAllMusic","index","findFloorIndex","current","scrollIntoView","behavior","block","Container","maxWidth","style","display","alignItems","className","alt","Typography","variant","Link","href","target","Grid","container","xs","event","overflowY","paddingTop","paddingBottom","line","justify","undefined","align","textAlign","IconButton","size","onClick","slice","toFixed","Switch","checked","onChange","Button","JSON","stringify","TextField","label","multiline","rows","split","filter","App","createMuiTheme","palette","type","ReactDOM","render","ThemeProvider","CssBaseline","getElementById"],"mappings":"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","file":"static/js/main.fbfb4738.chunk.js","sourcesContent":["import data from \"./data.json\";\n\nexport interface MusicJSON {\n  id: string;\n  lyrics: string[];\n  times: number[];\n}\n\nclass APIManager {\n\n  static getAllMusic(): MusicJSON[] {\n    return data.music;\n  }\n}\n\nexport default APIManager;\n","import React, { useEffect, useState } from 'react';\nimport { MusicJSON } from './APIManager';\n\ntype YoutubeVideoProps = {\n  music: MusicJSON[],\n  width: string,\n  height: string,\n  onReady: (event: any) => void,\n  onStateChange: (event: any) => void,\n  onCurrentTimeChange: (player: any) => void,\n  loopCurrentSong: boolean\n}\n\nconst YoutubeVideo = (props: YoutubeVideoProps) => {\n\n  const { music, width, height, onReady, onStateChange, onCurrentTimeChange, loopCurrentSong } = props;\n\n  const [player, setPlayer] = useState(null);\n\n  useEffect(() => {\n    const interval = setInterval(() => { if (player && player.getCurrentTime) onCurrentTimeChange(player) }, 100); \n    return () => clearInterval(interval);\n  }, [player, onCurrentTimeChange]);\n\n  useEffect(() => {\n\n    const loadVideo = () => {\n  \n      // the Player object is created uniquely based on the id in props\n      // @ts-ignore\n      setPlayer(new window.YT.Player(\"player\", {\n        width: width,\n        height: height,\n        events: {\n          onReady: onReady,\n          onStateChange: onStateChange\n        }\n      }));\n\n    };\n\n    // On mount, check to see if the API script is already loaded\n    // @ts-ignore\n    if (!window.YT) { // If not, load the script asynchronously\n      const tag = document.createElement('script');\n      tag.src = 'https://www.youtube.com/iframe_api';\n\n      // onYouTubeIframeAPIReady will load the video after the script is loaded\n      // @ts-ignore\n      window.onYouTubeIframeAPIReady = loadVideo;\n\n      const firstScriptTag = document.getElementsByTagName('script')[0];\n      firstScriptTag.parentNode.insertBefore(tag, firstScriptTag);\n\n    } else { // If script is already there, load the video directly\n      loadVideo();\n    }\n    // eslint-disable-next-line\n  }, []);\n\n  useEffect(() => {\n    if (player && player.loadPlaylist) {\n      if (loopCurrentSong) {\n        player.loadPlaylist([music[player.getPlaylistIndex()].id]);\n        player.setLoop(true);\n      }\n      else {\n        player.loadPlaylist(music.map(m => m.id));\n        player.setLoop(true);\n      }\n    }\n  }, [loopCurrentSong, player, music]);\n\n  return (\n    <div id=\"player\" />\n  );\n\n};\n\nexport default YoutubeVideo;","class BinarySearch {\n\n  /**\n   * Find the largest number smaller than target\n   * @param items - items to search from\n   * @param item - item to search the floor of\n   * @return index of item found. -1 if not found.\n   */\n  static findFloorIndex(items: number[], item: number): number {\n    return this.findFloorIndexHelper(items, item, 0, items.length - 1);\n  }\n\n  private static findFloorIndexHelper(items: number[], item: number, lo: number, hi: number): number {\n    \n    if (lo >= hi) return lo;\n\n    if (lo + 1 === hi) {\n      if (items[hi] <= item) return hi;\n      else return lo;\n    }\n\n    const mid = lo + Math.floor((hi - lo) / 2);\n\n    if (items[mid] === item) return mid;\n\n    if (items[mid] < item) {\n      return this.findFloorIndexHelper(items, item, mid, hi);\n    }\n    else {\n      return this.findFloorIndexHelper(items, item, lo, mid - 1);\n    }\n\n  }\n\n}\n\nexport default BinarySearch;","import React, { useState, useEffect, useRef, } from \"react\";\nimport { Typography, Container, Grid, makeStyles, Theme, Button, IconButton, Link, TextField, Switch } from \"@material-ui/core\";\nimport APIManager from \"./APIManager\";\nimport YoutubeVideo from \"./YouTubeVideo\";\nimport BinarySearch from \"./BinarySearch\";\nimport TimerIcon from '@material-ui/icons/Timer';\n\nconst useStyles = makeStyles((theme: Theme) => ({\n\n  active: {\n    marginTop: theme.spacing(1),\n    marginBottom: theme.spacing(1)\n  },\n\n  inactive: {\n    marginTop: theme.spacing(1),\n    marginBottom: theme.spacing(1),\n    color: \"#9e9e9e\"\n  },\n\n  logo: {\n    width: 48,\n    marginRight: theme.spacing(1)\n  }\n}));\n\nfunction copyToClipboard(text) {\n  var dummy = document.createElement(\"textarea\");\n  // to avoid breaking orgain page when copying more words\n  // cant copy when adding below this code\n  // dummy.style.display = 'none'\n  document.body.appendChild(dummy);\n  //Be careful if you use texarea. setAttribute('value', value), which works with \"input\" does not work with \"textarea\". – Eduard\n  dummy.value = text;\n  dummy.select();\n  document.execCommand(\"copy\");\n  document.body.removeChild(dummy);\n}\n\nconst Music = () => {\n\n  const classes = useStyles();\n  const [music, setMusic] = useState(null);\n  const [currentVideoIndex, setCurrentVideoIndex] = useState(0);\n  const [currentVideoTimeIndex, setCurrentVideoTimeIndex] = useState(0);\n  const [currentVideoTime, setCurrentVideoTime] = useState(0);\n\n  const [times, setTimes] = useState(null);\n\n  const [lyrics, setLyrics] = useState(\"\");\n\n  const [loopChecked, setLoopChecked] = useState(false);\n\n  const ref = useRef(null);\n\n  useEffect(() => {\n    setMusic(APIManager.getAllMusic());\n  }, []);\n\n  useEffect(() => {\n    if (!music) return;\n\n    setTimes(music[currentVideoIndex].times);\n  }, [music, currentVideoIndex]);\n \n  useEffect(() => {\n\n    if (!music) return;\n\n    const index = BinarySearch.findFloorIndex(music[currentVideoIndex].times, currentVideoTime)\n    \n    if (index !== currentVideoTimeIndex) {\n      setCurrentVideoTimeIndex(index);\n    }\n\n  }, [currentVideoTime, music, currentVideoIndex, currentVideoTimeIndex]);\n\n  useEffect(() => {\n\n    if (!music) return;\n\n    if (ref && ref.current) ref.current.scrollIntoView({\n      behavior: \"smooth\", \n      block: \"center\"\n    });\n\n  }, [currentVideoTimeIndex, music]);\n\n  return (\n    <Container maxWidth=\"lg\">\n      <div style={{ display: \"flex\", alignItems: \"center\" }}>\n        <img className={classes.logo} alt=\"Jmusic\" src=\"https://github.com/ioneone/Jmusic/blob/develop/logo.png?raw=true\" />\n        <Typography display=\"inline\" variant=\"h6\">\n          JMusic\n        </Typography>\n      </div>\n      <Typography variant=\"subtitle2\">\n        About: Music Loop Player\n      </Typography>\n      <Typography variant=\"body2\">\n        Motivation comes from <Link href=\"https://support.google.com/youtube/thread/12880369?hl=en\" target=\"_blank\">here</Link>\n      </Typography>\n      <Typography variant=\"body2\">\n        <Link href=\"https://listenonrepeat.com/ \" target=\"_blank\">ListenOnRepeat</Link> was nice but the ads were killing my CPU\n      </Typography>\n      <Grid container spacing={2}>\n        <Grid item xs={7}>\n          {\n            music && \n            <YoutubeVideo\n              width=\"100%\"\n              height=\"420px\"\n              music={music}\n              onReady={(event) => {\n                const player = event.target;\n                player.loadPlaylist(music.map(m => m.id));\n                player.setLoop(true);\n              }}\n              onStateChange={(event) => {\n                const player = event.target;\n                setCurrentVideoIndex(player.getPlaylistIndex());\n              }}\n              onCurrentTimeChange={(player) => {\n                setCurrentVideoTime(player.getCurrentTime());\n              }}\n              loopCurrentSong={loopChecked}\n            />\n          }\n        </Grid>\n        <Grid item xs={5} style={{ height: 420, overflowY: \"auto\", paddingTop: 210, paddingBottom: 210 }}>\n          {\n            music && times && music[currentVideoIndex].lyrics.map((line, index) => \n              <Grid container justify=\"center\" alignItems=\"center\">\n                <Grid item xs={9}>\n                  <Typography \n                    ref={index === currentVideoTimeIndex ? ref : undefined}\n                    className={index === currentVideoTimeIndex ? classes.active : classes.inactive } \n                    align=\"center\"\n                    variant=\"body1\"\n                  >\n                    {line}\n                  </Typography> \n                </Grid>\n                <Grid item xs={1} style={{ textAlign: \"right\" }}>\n                  <IconButton \n                    size=\"small\"\n                    onClick={() => {\n                      setTimes([...times.slice(0, index), currentVideoTime, ...times.slice(index + 1)]);\n                    }}\n                  >\n                    <TimerIcon />\n                  </IconButton>\n                </Grid>\n                <Grid item xs={2}>\n                  <Typography \n                    align=\"center\"\n                    variant=\"body1\"\n                  >\n                    {times[index] ? times[index].toFixed(2) : \"...\"}\n                  </Typography> \n                </Grid>\n              </Grid>\n            )\n          }\n        </Grid>\n      </Grid>\n      <div>\n        Loop Current Song\n        <Switch\n          checked={loopChecked}\n          onChange={(event) => {\n            setLoopChecked(event.target.checked);\n          }}\n        />\n      </div>\n      <div>\n        <Typography>\n          Current Video Time: {currentVideoTime}\n        </Typography>\n        <br/>\n        <Button\n          onClick={() => {\n            copyToClipboard(JSON.stringify(times));\n          }}\n        >\n          Copy lyrics times to Clipboard\n        </Button>\n      </div>\n      <div>\n        <TextField\n          label=\"lyrics\"\n          multiline\n          rows={4}\n          variant=\"outlined\"\n          value={lyrics}\n          onChange={(event) => {\n            setLyrics(event.target.value);\n          }}\n        />\n        <br />\n        <Button\n          onClick={() => {\n            copyToClipboard(JSON.stringify(lyrics.split(\"\\n\").filter(line => line.length > 0)));\n          }}\n        >\n          Transform lyrics to array of string and copy to clipboard\n        </Button>\n      </div>\n    </Container>\n  );\n}\n\nexport default Music;","import React from \"react\";\nimport Music from \"./Music\";\nimport { Container } from \"@material-ui/core\";\n\nfunction App() {\n  return (\n    <Container>\n      <Music />\n    </Container>\n  );\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport { createMuiTheme, ThemeProvider } from '@material-ui/core/styles';\nimport { CssBaseline } from '@material-ui/core';\n\nconst theme = createMuiTheme({\n  palette: {\n    type: \"dark\"\n  }\n});\n\nReactDOM.render(\n  <ThemeProvider theme={theme}>\n    <CssBaseline />\n    <App />\n  </ThemeProvider>,\n  document.getElementById('root')\n);"],"sourceRoot":""}